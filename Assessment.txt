1) create table myemp(Eno number(6) PRIMARY KEY,Ename varchar2(30) NOT NULL,Deptno number(4) NOT NULL,Esal number(8,2));

    alter table myemp add experience number(2) NOT  NULL;
    insert all
   	 into myemp(Eno,Ename,Deptno,Esal ,experience) values(100101,'Alex',3030,15000,5)
  	 into myemp(Eno,Ename,Deptno,Esal,experience) values(100102,'Bell',3030,5000,1)
   	 into myemp(Eno,Ename,Deptno,Esal ,experience) values(100103,'Clane',3030,10000,2)
  	 into myemp(Eno,Ename,Deptno,Esal,experience) values(100104,'Daneil',3030,17000,3)
   	 into myemp(Eno,Ename,Deptno,Esal,experience) values(100105,'Jack',3030,20000,7)
    	select * from dual;
    
    update myemp set Esal=null where Esal >=5000 and Esal <=10000;

----------------------------------------------------------------------------------------------------------------------------------------------------------
2) 
    ALTER TABLE myemp ADD comm number(3) default null;
    update myemp set comm=300 where Eno=100102;
    update myemp set comm=300 where Eno=100103;
    create table empcommmnull as (select eno,ename,comm from myemp where comm IS NULL)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
3)ALTER TABLE myemp DROP PRIMARY KEY;
-----------------------------------------------------------------------------------------------------------------------------------------------------------
4)
CREATE OR REPLACE TRIGGER weekend1_trigger 
BEFORE INSERT OR UPDATE OR DELETE on myemp 
  FOR EACH ROW
  DECLARE
  v_day DATE := TRUNC(SYSDATE);
  ex_invalid  EXCEPTION; 
  BEGIN
    IF TO_CHAR(v_day,'DY')IN ('SAT','SUN') THEN
       RAISE ex_invalid;
    END IF;
    EXCEPTION 
    WHEN ex_invalid THEN 
      RAISE_APPLICATION_ERROR(-20001,'Sorry Access on week-end days is denied');
  END; 
 
insert into myemp values(100106,'Alexa',3030,15000,3,300);
delete from myemp where Eno=100101;
update myemp set Ename=null where Eno=100101;
-------------------------------------------------------------------------------------------------------------------------------------------------------------
5)
DECLARE 
   s_id student.stu_id%type := &dd_id; 
   -- user defined exception 
   ex_invalid_id  EXCEPTION; 
BEGIN 
   IF s_id <= 0 THEN 
      RAISE ex_invalid_id; 
   ELSE 
      SELECT stu_id into s_id from student
   WHERE  stu_id=s_id; 
   DBMS_OUTPUT.PUT_LINE ('Stu id: '|| s_id);
   END IF; 

EXCEPTION 
   WHEN ex_invalid_id THEN 
      RAISE_APPLICATION_ERROR(-20001,'Stu id must be > 0');
   WHEN no_data_found THEN 
     RAISE_APPLICATION_ERROR(-20002,'No such record');
   WHEN others THEN 
     dbms_output.put_line('Error!'); 
END; 
/
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6)
CREATE TABLE ebill( cno varchar2(10) primary key,cname varchar2(30) NOT NULL,nounits number(4) NOT NULL,bamt number(8,2) )

desc ebill;

INSERT ALL
         INTO ebill (cno, cname,nounits,bamt) VALUES ('a11', 'Jack', 1,'')
          INTO ebill (cno, cname,nounits,bamt) VALUES ('a12', 'aIla', 2,'')
          INTO ebill (cno, cname,nounits,bamt) VALUES ('a13', 'hellz', 30,'')
          INTO ebill (cno, cname,nounits,bamt) VALUES ('a14', 'xia', 14,'')
          INTO ebill (cno, cname,nounits,bamt) VALUES ('a15', 'rike', 15,'')
      SELECT * FROM dual

create procedure calculate(in x varchar(10), out o decimal(8,2))
begin
declare done boolean default 0;
declare units int(4);
declare cur cursor for
select nounits from ebill where cno=x;
open cur;
fetch cur into uits;
if units>200 then
set o=(units-200)*1.5+150;
elseif units>100 and units<200 then
set o=(units-100)*1.5+50;
else
set o=units*0.5;
end if;
close cur;
update ebill set bamt=o where cno=x;
select * from ebill where cno=x;
end 

output:
Warning: Procedure created with compilation errors.


